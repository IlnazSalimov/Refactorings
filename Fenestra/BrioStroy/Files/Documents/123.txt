торые реализации потоков выполняют локальную буферизацию основных данных для улучшения производительности. В таких потоках для удаления внутренних буферов и обеспечения записи всех данных в основной источник данных или хранилище объектов можно использовать метод Flush.

Вызов Close для Stream очищает все буферизованные данные, по сути вызывая для вас Flush. Close также освобождает ресурсы операционной системы, такие как дескрипторы файлов, сетевые подключения или память, используемая для внутренней буферизации. Класс BufferedStream предоставляет возможность создания оболочки в виде буферного потока вокруг другого потока, что позволяет повысить производительность при чтении и записи.

Если необходим поток без резервного хранилища (т. н. корзины), рекомендуется использовать Null.

Примечания для разработчиков
При реализации класса, созданного на основе класса Stream, необходимо предоставить реализации для методов Read и Write. Асинхронные методы BeginRead, EndRead, BeginWrite и EndWrite реализуются через синхронные методы Read и Write. Аналогично реализации методов Read и Write будут правильно работать с асинхронными методами. Стандартные реализации методов ReadByte и WriteByte создают новый одноэлементный массив байтов, а затем вызывают реализации методов Read и Write. Если при создании производного класса на основе класса Stream имеется внутренний буфер байтов, чтобы получить доступ к внутреннему буферу и тем самым существенно увеличить производительность, рекомендуется переопределить эти методы. Необходимо также предоставить реализации свойств и методов CanRead, CanSeek, CanWrite, Flush, Length, Position, Seek и SetLength.

Переопределять метод Close не рекомендуется, вместо этого поместите весь блок логи